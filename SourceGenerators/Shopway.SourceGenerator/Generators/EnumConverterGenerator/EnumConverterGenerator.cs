using Microsoft.CodeAnalysis.Text;
using Microsoft.CodeAnalysis;
using Shopway.SourceGenerator.Utilities;
using System.Collections.Immutable;
using System.Text;
using static Shopway.SourceGenerator.Utilities.Constants;

namespace Shopway.SourceGenerator.Generators;

[Generator(LanguageNames.CSharp)]
public sealed class EnumConverterGenerator() : IncrementalGeneratorBase<EnumConverterToGenerateEntry>(RegisterSourceProvider, Generate)
{
    private const string GenerateEnumConverterAttributeMetadataName = "System.GenerateEnumConverterAttribute";
    private const string GenerateEnumConverterAttributeFileName = "GenerateEnumConverterAttribute.g.cs";

    public const string GenerateEnumConverterAttribute = Header + $$$"""

namespace System;

/// <summary>
/// Add to custom empty class for given enum to indicate that enum converter should be generated
/// </summary>
[global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = "Generated by the dr-marek-jaskula source generator.")]
public class GenerateEnumConverterAttribute : global::System.Attribute
{
    public required string {{{EnumName}}};
    public required string {{{EnumNamespace}}};
}
""";

    private static IncrementalValuesProvider<EnumConverterToGenerateEntry> RegisterSourceProvider(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource
        (
            GenerateEnumConverterAttributeFileName,
            SourceText.From(GenerateEnumConverterAttribute, Encoding.UTF8))
        );

        return context
            .SyntaxProvider
            .ForAttributeWithMetadataName(GenerateEnumConverterAttributeMetadataName, Selectors.IsClass, MapToEnumConverterToGenerate)
            .Where(x => x != EnumConverterToGenerateEntry.None);
    }

    private static void Generate(SourceProductionContext context, ImmutableArray<EnumConverterToGenerateEntry> enumConverterToGenerateEntries)
    {
        foreach (var enumConverterToGenerateEntry in enumConverterToGenerateEntries)
        {
            StringBuilder sb = new();
            var result = enumConverterToGenerateEntry.Generate(sb);
            context.AddSource(enumConverterToGenerateEntry.EnumName + ".g.cs", SourceText.From(result, Encoding.UTF8));
        }
    }

    private static EnumConverterToGenerateEntry MapToEnumConverterToGenerate(GeneratorAttributeSyntaxContext context, CancellationToken cancellationToken)
    {
        if (context.TargetSymbol is not INamedTypeSymbol entitySymbol)
        {
            return EnumConverterToGenerateEntry.None;
        }

        cancellationToken.ThrowIfCancellationRequested();

        AttributeData attribute = context.Attributes.First(a => GenerateEnumConverterAttributeMetadataName.Contains(a.AttributeClass?.Name));

        var enumName = attribute.NamedArguments!.First(x => x.Key == EnumName).Value.Value!.ToString();
        var enumNamespace = attribute.NamedArguments!.First(x => x.Key == EnumNamespace).Value.Value!.ToString();

        string @namespace = entitySymbol.ContainingNamespace.IsGlobalNamespace
            ? string.Empty
            : entitySymbol.ContainingNamespace.ToString();

        return new(enumName, enumNamespace, @namespace);
    }
}