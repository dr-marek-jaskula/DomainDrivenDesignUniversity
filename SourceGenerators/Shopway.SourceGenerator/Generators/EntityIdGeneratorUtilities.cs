using System.Text;
using static Shopway.SourceGenerator.Utilities.Constants;

namespace Shopway.SourceGenerator.Generators;

public static class EntityIdGeneratorUtilities
{
    /// <summary>
    /// Due to the fact that this generators is created for particular application and the namespace where generic IEntityId interface will not change it is hardcoded
    /// If for some reason the generic EntityId namespace would change, than it should be adjusted.
    /// More generic approach would be to accept an namespace at EntityIdAttribute as string or to introduce generic parameter for IEntityId on EntityIdAttribute.
    /// That would allow to read the namespace where generic IEntityId is. 
    /// </summary>
    private const string GenericIEntityIdNamespace = "using Shopway.Domain.Common.BaseTypes.Abstractions;";

    public const string EntityIdAttribute = Header + """

namespace System;

/// <summary>
/// Add to entities to indicate that entity id structure should be generated
/// </summary>
[global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = "Generated by the dr-marek-jaskula source generator.")]
public class EntityIdAttribute : global::System.Attribute
{
}
""";

    public static string GenerateEntityIdStruct(StringBuilder stringBuilder, EntityIdToGenerateEntry entityIdToGenerate)
    {
        return stringBuilder
            .Append(Header)
            .AppendLine()
            .AppendLine(GenericIEntityIdNamespace)
            .AppendLine()
            .Append(@"namespace ")
            .Append(entityIdToGenerate.Namespace)
            .Append(";")
            .AppendLine()
            .AppendLine()
            .Append("public readonly record struct ")
            .Append(entityIdToGenerate.Name)
            .Append(@" : IEntityId<")
            .Append(entityIdToGenerate.Name)
            .Append(">")
            .AppendLine()
            .Append($$$"""
            {
                private {{{entityIdToGenerate.Name}}}(Ulid id)
                {
                    Value = id;
                }

                public Ulid Value { get; }

                public static {{{entityIdToGenerate.Name}}} New()
                {
                    return new {{{entityIdToGenerate.Name}}}(Ulid.NewUlid());
                }

                public static {{{entityIdToGenerate.Name}}} Create(Ulid id)
                {
                    return new {{{entityIdToGenerate.Name}}}(id);
                }

                public override int GetHashCode()
                {
                    return Value.GetHashCode();
                }

                public override string ToString()
                {
                    return Value.ToString();
                }

                public int CompareTo(IEntityId? other)
                {
                    if (other is null)
                    {
                        return 1;
                    }

                    if (other is not {{{entityIdToGenerate.Name}}} otherId)
                    {
                        throw new ArgumentNullException($"IEntity is not {GetType().FullName}");
                    }

                    return Value.CompareTo(otherId.Value);
                }

                public static bool operator >({{{entityIdToGenerate.Name}}} a, {{{entityIdToGenerate.Name}}} b) => a.CompareTo(b) is 1;
                public static bool operator <({{{entityIdToGenerate.Name}}} a, {{{entityIdToGenerate.Name}}} b) => a.CompareTo(b) is -1;
                public static bool operator >=({{{entityIdToGenerate.Name}}} a, {{{entityIdToGenerate.Name}}} b) => a.CompareTo(b) >= 0;
                public static bool operator <=({{{entityIdToGenerate.Name}}} a, {{{entityIdToGenerate.Name}}} b) => a.CompareTo(b) <= 0;
            }
            """)
            .ToString();
    }
}