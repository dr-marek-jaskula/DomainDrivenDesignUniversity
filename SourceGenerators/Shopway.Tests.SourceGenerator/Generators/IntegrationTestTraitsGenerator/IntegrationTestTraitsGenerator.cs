using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Shopway.SourceGenerator.Base;
using Shopway.SourceGenerator.Base.Utilities;
using System.Collections.Immutable;
using System.Text;
using static Shopway.SourceGenerator.Base.Utilities.Constants;

namespace Shopway.Tests.SourceGenerator.Generators;

[Generator(LanguageNames.CSharp)]
public sealed class IntegrationTestTraitsGenerator() : IncrementalGeneratorBase<IntegrationTestTraitsToGenerateEntry>(RegisterSourceProvider, Generate)
{
    private const string GenerateTraitsAttributeMetadataName = "System.GenerateIntegrationTestTraitsAttribute";
    private const string GenerateTraitsAttributeFileName = "GenerateIntegrationTestTraitsAttribute.g.cs";

    private const string IntegrationTestGeneratedTraitsFileName = "IntegrationTestGeneratedTraits";

    public const string GenerateTraitsAttribute = Header + """

namespace System;

/// <summary>
/// Add to AssemblyReference in the test assembly to generate Integration Test Traits
/// </summary>
[global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = "Generated by the dr-marek-jaskula source generator.")]
public class GenerateIntegrationTestTraitsAttribute : global::System.Attribute;
""";

    private static IncrementalValuesProvider<IntegrationTestTraitsToGenerateEntry> RegisterSourceProvider(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource
        (
            GenerateTraitsAttributeFileName,
            SourceText.From(GenerateTraitsAttribute, Encoding.UTF8))
        );

        return context
            .SyntaxProvider
            .ForAttributeWithMetadataName(GenerateTraitsAttributeMetadataName, Selectors.IsClass, MapToTraitsToGenerate)
            .Where(x => x != IntegrationTestTraitsToGenerateEntry.None);
    }

    private static void Generate(SourceProductionContext context, ImmutableArray<IntegrationTestTraitsToGenerateEntry> traitsToGenerateEntries)
    {
        foreach (var traitsToGenerateEntry in traitsToGenerateEntries)
        {
            StringBuilder sb = new();
            var result = traitsToGenerateEntry.Generate(sb);
            context.AddSource(IntegrationTestGeneratedTraitsFileName + GeneratedFileExtension, SourceText.From(result, Encoding.UTF8));
        }
    }

    private static IntegrationTestTraitsToGenerateEntry MapToTraitsToGenerate(GeneratorAttributeSyntaxContext context, CancellationToken cancellationToken)
    {
        if (context.TargetSymbol is not INamedTypeSymbol entitySymbol)
        {
            return IntegrationTestTraitsToGenerateEntry.None;
        }

        cancellationToken.ThrowIfCancellationRequested();

        string @namespace = entitySymbol.ContainingNamespace.IsGlobalNamespace
            ? string.Empty
            : entitySymbol.ContainingNamespace.ToString();

        return new(@namespace);
    }
}
