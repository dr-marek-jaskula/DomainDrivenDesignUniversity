using Shopway.SourceGenerator.Base.Tests.Unit.Utilities;
using Shopway.Tests.SourceGenerator.Generators;
using static Shopway.SourceGenerator.Base.Tests.Unit.Utilities.Constants;

namespace Shopway.Tests.SourceGenerator.Tests.Unit.GeneratorTests;

[Trait(nameof(UnitTest), UnitTest.SourceGenerator)]
public sealed class UnitTestTraitsGeneratorTests
{
    private readonly UnitTestTraitsGenerator _traitsGenerator;

    public UnitTestTraitsGeneratorTests()
    {
        _traitsGenerator = new UnitTestTraitsGenerator();
    }

    [Fact]
    public void TraitsGenerator_ShouldGenerateTraitsAttribute()
    {
        //Act
        var actualResult = _traitsGenerator.Generate(string.Empty);

        //Assert
        actualResult.Should().Be(@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the dr-marek-jaskula source generator
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable enable

namespace System;

/// <summary>
/// Add to AssemblyReference in the test assembly to generate Unit Test Traits
/// </summary>
[global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = ""Generated by the dr-marek-jaskula source generator."")]
public class GenerateUnitTestTraitsAttribute : global::System.Attribute;");
    }

    [Fact]
    public void TraitsGenerator_ShouldGenerateTraits()
    {
        //Arrange
        (string input, string output) = GetTraitsToGenerate();

        //Act
        var actualResult = _traitsGenerator.Generate(input);

        //Assert
        actualResult.Should().Contain(output);
    }

    private static (string input, string output) GetTraitsToGenerate()
    {
        var input = """
    using System;

    namespace MyNamespace;

    [GenerateUnitTestTraitsAttribute]
    public static class AssemblyReference;
    """;

        var output = """
        //------------------------------------------------------------------------------
        // <auto-generated>
        //     This code was generated by the dr-marek-jaskula source generator
        //
        //     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
        // </auto-generated>
        //------------------------------------------------------------------------------
        
        #nullable enable
        
        using Xunit.Abstractions;
        using Xunit.Sdk;
        
        namespace MyNamespace;
        
        public static class UnitTest
        {
            public class Utility : UnitTestAttribute
            {
                public override string UnitTest => nameof(Utility);
            }
            
            public class Architecture : UnitTestAttribute
            {
                public override string UnitTest => nameof(Architecture);
            }
            
            public class Domain : UnitTestAttribute
            {
                public override string UnitTest => nameof(Domain);
            }
            
            public class Application : UnitTestAttribute
            {
                public override string UnitTest => nameof(Application);
            }
            
            public class Persistence : UnitTestAttribute
            {
                public override string UnitTest => nameof(Persistence);
            }
            
            public class Infrastructure : UnitTestAttribute
            {
                public override string UnitTest => nameof(Infrastructure);
            }
            
            public class App : UnitTestAttribute
            {
                public override string UnitTest => nameof(App);
            }
            
            public class Presentation : UnitTestAttribute
            {
                public override string UnitTest => nameof(Presentation);
            }
        }

        [TraitDiscoverer("MyNamespace.UnitTestDiscoverer", "MyNamespace")]
        [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]
        public abstract class UnitTestAttribute : Attribute, ITraitAttribute
        {
            public abstract string UnitTest { get; }
        }
        
        public sealed class UnitTestDiscoverer : ITraitDiscoverer
        {
            public const string Key = nameof(UnitTestAttribute.UnitTest);
        
            public IEnumerable<KeyValuePair<string, string>> GetTraits(IAttributeInfo traitAttribute)
            {
                var category = traitAttribute.GetNamedArgument<string>(Key);
                yield return new KeyValuePair<string, string>(Key, category);
            }
        }
        """;

        return (input, output);
    }
}
